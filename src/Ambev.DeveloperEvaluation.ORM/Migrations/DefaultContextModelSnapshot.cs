// <auto-generated />
using System;
using Ambev.DeveloperEvaluation.ORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ambev.DeveloperEvaluation.ORM.Migrations
{
    [DbContext(typeof(DefaultContext))]
    partial class DefaultContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SaleNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Sales", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            BranchId = new Guid("e5cafcf3-bb8f-4c5e-b64c-61b65890e5fd"),
                            BranchName = "South Store",
                            CustomerId = new Guid("5814ae18-07f5-454e-8e91-1c58b446b500"),
                            CustomerName = "Client C",
                            IsCancelled = false,
                            SaleDate = new DateTime(2025, 4, 16, 12, 59, 24, 689, DateTimeKind.Utc).AddTicks(6608),
                            SaleNumber = "SALE-0001",
                            TotalAmount = 4800m
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            BranchId = new Guid("3f6ffc28-6709-4faa-9a5b-6e824ba1abe5"),
                            BranchName = "Rio Store",
                            CustomerId = new Guid("ba88d782-b0e9-47c7-b5af-d7222c9e2bdf"),
                            CustomerName = "Client B",
                            IsCancelled = false,
                            SaleDate = new DateTime(2025, 4, 16, 12, 59, 24, 689, DateTimeKind.Utc).AddTicks(6641),
                            SaleNumber = "SALE-0002",
                            TotalAmount = 300m
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            BranchId = new Guid("b8daf8e7-ed7f-43d9-82b2-11eefeb228f5"),
                            BranchName = "Branch A",
                            CustomerId = new Guid("ff08029b-53b7-47db-9e91-7d1a48f5314a"),
                            CustomerName = "Rule: < 4 items (no discount)",
                            IsCancelled = false,
                            SaleDate = new DateTime(2025, 4, 16, 12, 59, 24, 689, DateTimeKind.Utc).AddTicks(6730),
                            SaleNumber = "SALE-RULE1",
                            TotalAmount = 300m
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            BranchId = new Guid("609e52c3-5431-48b1-97d5-2e99f77ba3f3"),
                            BranchName = "Branch B",
                            CustomerId = new Guid("4633ac96-9b00-48d0-9487-c07d1386b79c"),
                            CustomerName = "Rule: 4–9 items (10%)",
                            IsCancelled = false,
                            SaleDate = new DateTime(2025, 4, 16, 12, 59, 24, 689, DateTimeKind.Utc).AddTicks(6733),
                            SaleNumber = "SALE-RULE2",
                            TotalAmount = 900m
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            BranchId = new Guid("c6338af7-d712-46ba-95e6-78bb5cb00fd5"),
                            BranchName = "Branch C",
                            CustomerId = new Guid("ff69aac0-b29e-463f-b4c6-d82e6d3b068d"),
                            CustomerName = "Rule: 10–20 items (20%)",
                            IsCancelled = false,
                            SaleDate = new DateTime(2025, 4, 16, 12, 59, 24, 689, DateTimeKind.Utc).AddTicks(6738),
                            SaleNumber = "SALE-RULE3",
                            TotalAmount = 1600m
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            BranchId = new Guid("35c9c835-a464-4296-8b6e-adfe7ce2a516"),
                            BranchName = "Branch D",
                            CustomerId = new Guid("812ff1cf-5d40-407a-a4e5-188076369690"),
                            CustomerName = "Rule: > 20 items (invalid case)",
                            IsCancelled = false,
                            SaleDate = new DateTime(2025, 4, 16, 12, 59, 24, 689, DateTimeKind.Utc).AddTicks(6740),
                            SaleNumber = "SALE-RULE4",
                            TotalAmount = 0m
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("845d8ece-9c6b-4e1f-930c-fd6a136ca4b6"),
                            Discount = 0.2m,
                            IsCancelled = false,
                            ProductId = new Guid("d8a43b21-d346-4ce2-ad8e-60a4ec7b7547"),
                            ProductName = "LED Monitor",
                            Quantity = 15,
                            SaleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            UnitPrice = 400m
                        },
                        new
                        {
                            Id = new Guid("40bb13df-55ae-465b-a7bb-117eb03407b5"),
                            Discount = 0m,
                            IsCancelled = false,
                            ProductId = new Guid("1d372efe-2bb8-43b0-95ae-e69b542e80fa"),
                            ProductName = "Gamer Mouse",
                            Quantity = 3,
                            SaleId = new Guid("22222222-2222-2222-2222-222222222222"),
                            UnitPrice = 100m
                        },
                        new
                        {
                            Id = new Guid("aaa10001-0000-0000-0000-000000000001"),
                            Discount = 0m,
                            IsCancelled = false,
                            ProductId = new Guid("c66c053c-de32-4189-93c7-2892c64da20e"),
                            ProductName = "Mouse",
                            Quantity = 2,
                            SaleId = new Guid("33333333-3333-3333-3333-333333333333"),
                            UnitPrice = 150m
                        },
                        new
                        {
                            Id = new Guid("aaa10002-0000-0000-0000-000000000002"),
                            Discount = 0.1m,
                            IsCancelled = false,
                            ProductId = new Guid("79e04c8c-f8ea-4963-a317-048086cce4b9"),
                            ProductName = "Keyboard",
                            Quantity = 6,
                            SaleId = new Guid("44444444-4444-4444-4444-444444444444"),
                            UnitPrice = 150m
                        },
                        new
                        {
                            Id = new Guid("aaa10003-0000-0000-0000-000000000003"),
                            Discount = 0.2m,
                            IsCancelled = false,
                            ProductId = new Guid("87822321-e6e5-43f5-b541-9386e7fd48b0"),
                            ProductName = "Headset",
                            Quantity = 10,
                            SaleId = new Guid("55555555-5555-5555-5555-555555555555"),
                            UnitPrice = 200m
                        },
                        new
                        {
                            Id = new Guid("aaa10004-0000-0000-0000-000000000004"),
                            Discount = 0m,
                            IsCancelled = false,
                            ProductId = new Guid("4ebe432e-d89c-4e23-8d35-8c5073a4ac2a"),
                            ProductName = "Webcam",
                            Quantity = 25,
                            SaleId = new Guid("66666666-6666-6666-6666-666666666666"),
                            UnitPrice = 300m
                        });
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.SaleItem", b =>
                {
                    b.HasOne("Ambev.DeveloperEvaluation.Domain.Entities.Sale", "Sale")
                        .WithMany("Items")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Ambev.DeveloperEvaluation.Domain.Entities.Sale", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
